from pathlib import Path
import dataclasses
import urllib.parse as url_parse

# For you to complete
# ----------------------------------------

# All classes should be databclasses.

class LinuxMachine:

    '''
    Linux machines have  hostnames, and root passwords. Both are strings.
    Of course your security audit will not pass if the root password is included in the repr of a LinuxMachine.
    If a root password is not set on construction it should be randomly generated by the time the object is constructed.
    LinuxMachines are identical if their hostnames are the same. LinuxMachines can be included in sets and dicts.
    Your security audit will fail if the root password cannot be changed.
    '''

    pass # write me

class Webserver:
    '''
    Webservers have Application URIs (in the uri attribute).  The uri is a  urllib.parse.ParseResult, or at least is that type by the time a  Webserver is fully initialized. For convenience, Webservers also take string forms of URIs on initialization.  Webservers raise TypeErrors if the uri doesn't point to the hostname.
    '''
    pass

#exec(Path('../solutions/test_dataclass.py').read_text())    
# Validation tests
# ----------------------------------------

def test_dataclass_structure():
    ''' Validate that dataclasses are dataclasses and the schema is as we expect.
    '''
    assert dataclasses.is_dataclass(LinuxMachine)
    assert dataclasses.is_dataclass(Webserver)
    machine_fields = {f.name:f for f in dataclasses.fields(LinuxMachine)}
    webserver_fields = {f.name:f for f in dataclasses.fields(Webserver)}
    assert 'hostname' in machine_fields
    assert 'root_password' in machine_fields
    assert  'uri' in webserver_fields
    assert  webserver_fields['uri'].type is url_parse.ParseResult

def test_sets_and_friends():
    mailserver = LinuxMachine(hostname='mailserver.example.com')
    mailserver_2 = LinuxMachine(hostname='mailserver.example.com')
    webserver = Webserver(hostname='example.com', uri='https://example.com/mainpage.aspx')
    machines = {webserver, mailserver}
    assert mailserver_2 in machines
    assert LinuxMachine('example.com') not in machines, 'Webservers are not equal to LinuxMachines'
    
